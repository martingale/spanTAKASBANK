// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// loadSPN
RcppExport SEXP loadSPN(SEXP xmlFile);
RcppExport SEXP teminat_loadSPN(SEXP xmlFileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xmlFile(xmlFileSEXP);
    rcpp_result_gen = Rcpp::wrap(loadSPN(xmlFile));
    return rcpp_result_gen;
END_RCPP
}
// isCalculatorLoaded
RcppExport SEXP isCalculatorLoaded();
RcppExport SEXP teminat_isCalculatorLoaded() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(isCalculatorLoaded());
    return rcpp_result_gen;
END_RCPP
}
// unLoadCalculator
void unLoadCalculator();
RcppExport SEXP teminat_unLoadCalculator() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    unLoadCalculator();
    return R_NilValue;
END_RCPP
}
// clearPortfolio
RcppExport SEXP clearPortfolio();
RcppExport SEXP teminat_clearPortfolio() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(clearPortfolio());
    return rcpp_result_gen;
END_RCPP
}
// addItem
RcppExport SEXP addItem(std::string ticker, SEXP isOption, SEXP isCall, SEXP strike, std::string cMaturity, SEXP quantity, SEXP price, SEXP oExPrice, SEXP isOrder, SEXP isIntraDay, SEXP EffectPremium);
RcppExport SEXP teminat_addItem(SEXP tickerSEXP, SEXP isOptionSEXP, SEXP isCallSEXP, SEXP strikeSEXP, SEXP cMaturitySEXP, SEXP quantitySEXP, SEXP priceSEXP, SEXP oExPriceSEXP, SEXP isOrderSEXP, SEXP isIntraDaySEXP, SEXP EffectPremiumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type ticker(tickerSEXP);
    Rcpp::traits::input_parameter< SEXP >::type isOption(isOptionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type isCall(isCallSEXP);
    Rcpp::traits::input_parameter< SEXP >::type strike(strikeSEXP);
    Rcpp::traits::input_parameter< std::string >::type cMaturity(cMaturitySEXP);
    Rcpp::traits::input_parameter< SEXP >::type quantity(quantitySEXP);
    Rcpp::traits::input_parameter< SEXP >::type price(priceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type oExPrice(oExPriceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type isOrder(isOrderSEXP);
    Rcpp::traits::input_parameter< SEXP >::type isIntraDay(isIntraDaySEXP);
    Rcpp::traits::input_parameter< SEXP >::type EffectPremium(EffectPremiumSEXP);
    rcpp_result_gen = Rcpp::wrap(addItem(ticker, isOption, isCall, strike, cMaturity, quantity, price, oExPrice, isOrder, isIntraDay, EffectPremium));
    return rcpp_result_gen;
END_RCPP
}
// margin
RcppExport SEXP margin(SEXP arg1);
RcppExport SEXP teminat_margin(SEXP arg1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type arg1(arg1SEXP);
    rcpp_result_gen = Rcpp::wrap(margin(arg1));
    return rcpp_result_gen;
END_RCPP
}
// marginwc
RcppExport SEXP marginwc(SEXP arg1);
RcppExport SEXP teminat_marginwc(SEXP arg1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type arg1(arg1SEXP);
    rcpp_result_gen = Rcpp::wrap(marginwc(arg1));
    return rcpp_result_gen;
END_RCPP
}
